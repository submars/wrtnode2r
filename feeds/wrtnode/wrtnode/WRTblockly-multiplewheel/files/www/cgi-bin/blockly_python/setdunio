#!/usr/bin/python
#! encoding:utf-8
# Filename : socket_echo_udp_server_dgram.py
# import socket
import sys
import os
import re
import cgi
import binascii
import serial
import time
def hexShow(argv):  
    result = ''  
    hLen = len(argv)  
    for i in xrange(hLen):  
        hvol = ord(argv[i])  
        hhex = '%02x'%hvol  
        result += hhex+' '  
    print 'result:',result

def getcheck(argv):  
    result =0
    hLen = len(argv)
    for i in xrange(hLen-4):
        hvol = ord(argv[i+4]) 
        result=result^hvol
        if result<16:
            result2='0'+hex(result)[2:]
        else:
            result2=hex(result)[2:]
    result3=binascii.unhexlify(result2)
    return(result3)
def findindex(argv):  
    top ="\x48\x59\x3e"
    nPos = argv.find(top)
    if nPos!=-1:
        result=argv[nPos+3]
    else:
        result="-1"      
    return(result)
def findindex4(argv):
    top ="\x48\x59\x3e"
    nPos = argv.find(top)
    if nPos!=-1:
        result=argv[nPos+3:nPos+7]
    else:
        result="-1"      
    return(result)
def gethex(argv): 
    high= int(argv)//256
    low=int(argv)%256
    high1=hex(high)
    low1=hex(low)
    high1=high1[2:]
    low1=low1[2:]
    if len(high1)==1:
        high1='0'+high1
    if len(low1)==1:
        low1='0'+low1
    result =binascii.unhexlify(high1+low1)
    return(result)
# This class provides the functionality we want. You only need to look at
# this if you want to know how this works. It only needs to be defined
# once, no need to muck around with its internals.
class switch(object):
    def __init__(self, value):
        self.value = value
        self.fall = False
    def __iter__(self):
        """Return the match method once, then stop"""
        yield self.match
        raise StopIteration
    def match(self, *args):
        """Indicate whether or not to enter a case suite"""
        if self.fall or not args:
            return True
        elif self.value in args: # changed for v1.5, see below
            self.fall = True
            return True
        else:
            return False


# open serial port
ser = serial.Serial("/dev/ttyACM0", 115200, timeout=0.005)
ser.open()
print "Content-Type: application/json"
print ""
ans=""

form = cgi.FieldStorage()
if form.has_key("type"):
    type=form["type"].value
    ionum=form["io"].value
    num1=form["num1"].value
    num2=form["num2"].value
    for case in switch(type):
        if case('freqcover'):
            sel="\x48\x59\x3c\x06\x0B"+chr(int(ionum))+"\x01"+gethex(num1)+gethex(num2)
            chechnum=getcheck(sel)
            sel=sel+str(chechnum)
            ser.write(sel)
            ser.read(20)
            ser.close
            break
        if case('digital_write'):
            sel="\x48\x59\x3c\x02\x0C"+chr(int(ionum))+chr(int(num1))
            chechnum=getcheck(sel)
            sel=sel+str(chechnum)
            ser.write(sel)
            ser.read(20)
            ser.close
            break
        if case('iosetgpio'):
            sel="\x48\x59\x3c\x03\x0B"+chr(int(ionum))+"\x00"+chr(int(num1))
            chechnum=getcheck(sel)
            sel=sel+str(chechnum)
            ser.write(sel)
            ser.read(20)
            ser.close
            time.sleep(1)
            break
        if case('digital_read'):
            sel="\x48\x59\x3c\x02\x0c"+chr(int(ionum))+"\x02"
            chechnum=getcheck(sel)
            sel=sel+str(chechnum) 
            ser.write(sel)
            ans=ser.read(40)
            ans=findindex(ans)
            while ans=="-1":
                ser.write(sel)
                ans=ser.read(20)
                ans=findindex4(ans)
            ser.close
            #time.sleep(1)
            break
        if case('analog_read'):
            sel="\x48\x59\x3c\x02\x0c"+chr(int(ionum))+"\x03"
            chechnum=getcheck(sel)
            sel=sel+str(chechnum)
            
            ser.write(sel)
            ans=ser.read(40)
            ans=findindex4(ans)
            while ans=="-1":
                ser.write(sel)
                ans=ser.read(20)
                ans=findindex4(ans)
            ser.close
            
            #time.sleep(1)
            break  
        if case('iosetadc'):
            sel="\x48\x59\x3c\x02\x0B"+chr(int(ionum))+"\x02"
            chechnum=getcheck(sel)
            sel=sel+str(chechnum)            
            ser.write(sel)
            ser.read(20)
            ser.close
            #time.sleep(1)
            break                
        if case(): # default, could also just omit condition or 'if True'
            print "something else!"
            # No need to break here, it'll stop anyway
else:
    '''
    type='freqcover'
    ionum='14'
    num1='1000'
    num2='500'
    sel="\x48\x59\x3c\x02\x0B"+chr(int(ionum))+"\x02"
    chechnum=getcheck(sel)
    sel=sel+str(chechnum)
    hexShow(sel)
    ser.write(sel)
    ser.readline()

    time.sleep(3)
    sel="\x48\x59\x3c\x02\x0c"+chr(int(ionum))+"\x03"
    chechnum=getcheck(sel)
    sel=sel+str(chechnum)    
    ser.write(sel)
    hexShow(sel)
    ans=ser.readline()
    hexShow(ans)
    ans=findindex4(ans)
    ser.close
    '''
    ionum='13'
    num1='0'
    
    sel="\x48\x59\x3c\x03\x0B"+chr(int(ionum))+"\x00"+chr(int(num1))
    chechnum=getcheck(sel)
    sel=sel+str(chechnum)
    ser.write(sel)
    ser.read(100)  
    hexShow(sel)
    time.sleep(1)
    
    
    
    sel="\x48\x59\x3c\x02\x0c"+chr(int(ionum))+"\x02"
    chechnum=getcheck(sel)
    sel=sel+str(chechnum) 
    ser.write(sel)
    hexShow(sel)
    ans=ser.read(100)  
    hexShow(ans)
    ans=ser.read(100)  
    hexShow(ans)
    #ans=findindex(ans)
    #ans='%d' %int(ans[4])
    ser.close
    
print """{"ans":"%s"}"""%ans